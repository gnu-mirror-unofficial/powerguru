  PowerGuru is a program that does data logging of sensor data,
primarily focued on renewable energy and environmental monitoring. It
was part of a larger projet that handled power management of off-grid
systems.

  The original implementation was designed for what's now 20 year old
hardware. The host was an S-100 based systems with hardwired remote
controls running over serial ports. It worked with my Xantex (was
Trace) and Outback Power based inverter and charge controllers. At the
time, there was no software solution for this, but over time the
manufacturers developed their own. I even had to revese engineer the
protocols.

  Jumping forward 20 years, the availablity of inexpensive hardware
like the Rapberry PI or Aurdino, and many inexpensive GPIO, i2C, or
USB sensors have changed everything.

  If you've never done it, refactoring an old project is interesting. I
hope I write better C++ code now. In the years since this code was left
to bit-rot, there are new C++ standards, better libraries, and
different protocols. For one thing, the Boost libraries are awesome,
and allowed me to drop lots of old crufty C++ wrappers around a C
API.

  I needed some simple C++ code for an IOT workshop I'm teaching, so
decided to bring it back to life. Since I no longer own the off-grid
house, but do have solar panels on my truck, I decided to focus the
new version on power and weather monitoring that system in my pickup
truck.

  For those interested, there were several huge changes, basically
replacing the old code that handled the C APIs for system level tasks
like networking, logging, posix threading, using newer C++ containers
for data, and adopting smart pointers, 

  The other big change was depreciating the older Xantrex and Outback
protocols, because I have nothing to test it against anymore. Then I
had to add support for 1 wire sensors, which has good library
support. The final change was switching from Mysql to Postgresql,
primarily because I used Posgresql for other projects/

  Since the workshop needs to also cover using Python, I added a
Python version that does the same things. While developing Python on a
Raspberry PI is pretty easy, most large IOT appliction are written in
C++, and learning how to cross compile and remote debug is an
important skill set to know.

There's a few helper python scripts:
mergedb.py - Merge data logged to a remote postgresql database to a
	   local one 
chart.py - Crudely plot the data. (work in progress)
