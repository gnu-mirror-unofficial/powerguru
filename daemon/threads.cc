// 
// Copyright (C) 2018 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifdef HAVE_CONFIG_H
// This is generated by autoconf.
# include "config.h"
#endif

#include <cstring>
#include <vector>
#include <stdlib.h>
#include <unistd.h>
#include <termios.h>
#include <sstream>
#include <signal.h>
#include <errno.h>
#include <thread>
#include <condition_variable>
#include <mutex>
#include <chrono>

#ifdef HAVE_GETOPT_H
#include <getopt.h>
#else
extern int optind;
extern char *optarg;
#endif

#include "log.h"
#include "ownet.h"
#include "console.h"
#include "database.h"
#include "tcpip.h"
#include "xml.h"

extern LogFile dbglogfile;

using namespace std::chrono_literals;

void
client_handler(Tcpip &net)
{
    DEBUGLOG_REPORT_FUNCTION;

    retcode_t ret;
    //Tcpip net;
    int retries = 10;

    while (retries-- <= 10) {
        net.newNetConnection(true);

        bool loop = true;
        std::vector<unsigned char> data;
        while (loop) {
            data.clear();
            if (net.readNet(data).size() < 0) {
                dbglogfile << "ERROR: Got error from socket " << std::endl;
                loop = false;
            } else {
                if (data.data() == 0) {
                    continue;  
                }
                std::string buffer = (char *)data.data();
                //if (buffer.size() == 1 && *data.data() == 0) {
                if (data.size() == 1 && buffer[0] == 0) {
                    net.closeConnection();
                    // loop = false;
                    break;
                }
                if (data.size() == 0) {
                    sleep(1);
                    continue;
                }
                size_t pos = buffer.find('\n')-1;
                //std::cerr << "FOO: " << pos << " | " << std::string::npos << std::endl;
                if (pos == 0 || pos == std::string::npos) {
                    data.clear();
                    buffer.clear();
                    loop = false;
                    continue;
                }
                buffer.erase(pos);
                // if the first character is a <, assume it's in XML formst.
                if (buffer[0] == '<') {
                    XML xml;
                    xml.parseMem(buffer);
                    dbglogfile << "FIXME:: \"" << xml.nameGet() << "\"" << std::endl;
                    if (xml.nameGet() == "command") {
                        std::cerr << "FIXME: Command: " << xml.valueGet() << std::endl;
                        if (xml.valueGet() == "help") {
                            net.writeNet("Hello World!\n");
                        }
                        
                    } else if (xml.nameGet() == "data") {
                        std::cerr << "FIXME: DATA: " << xml.valueGet() << std::endl;
                    } else {
                        std::cerr << "FIXME: JUNK: " << xml.valueGet() << std::endl;
                    }
                } else {
                    std::cerr << buffer << std::endl;
                }
                buffer.clear();
            }
        }
    }

    //next.join();
    net.closeConnection();
}

#ifdef BUILD_OWNET
void
ownet_handler(pdev::Ownet &ownet)
{
    DEBUGLOG_REPORT_FUNCTION;
    dbglogfile << "PowerGuru - 1 Wire Mode" << std::endl;
    bool poll = true;

    // Open the network connection to the database.
    std::string query = "INSERT INTO onewire VALUES(";
    query += "";
    query += ");";

    std::map<std::string, pdev::ownet_t *> sensors = ownet.getSensors();
    std::map<std::string, pdev::ownet_t *>::iterator it;
    while (ownet.getPollSleep() != 0) {
        for (it = sensors.begin(); it != sensors.end(); it++) {
            if (it->second->family == "10") {
                ownet.getTemperature(it->first.c_str());
            }
        }
        ownet.dump();
        
        // Don't eat up all the cpu cycles!
        std::this_thread::sleep_for(std::chrono::seconds(ownet.getPollSleep()));
    }
}
#endif

#ifdef BUILD_OUTBACK
void
outback_handler(pdev::Ownet &ownet)
{
    DEBUGLOG_REPORT_FUNCTION;

    dbglogfile << "FIXME: outback_handler() unimplementd"<< std::endl;
    // Don't eat up all the cpu cycles!
    std::this_thread::sleep_for(std::chrono::seconds(ownet.getPollSleep()));
}
#endif

#ifdef BUILD_XANTREX
void
xantrex_handler(pdev::Ownet &ownet)
{
    DEBUGLOG_REPORT_FUNCTION;

    dbglogfile << "FIXME: xantrext_handler() unimplemented"<< std::endl;
    // Don't eat up all the cpu cycles!
    std::this_thread::sleep_for(std::chrono::seconds(ownet.getPollSleep()));
}
#endif

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
