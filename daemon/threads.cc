// 
// Copyright (C) 2018 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifdef HAVE_CONFIG_H
// This is generated by autoconf.
# include "config.h"
#endif

#include <cstring>
#include <vector>
#include <stdlib.h>
#include <unistd.h>
#include <termios.h>
#include <sstream>
#include <signal.h>
#include <errno.h>
#include <thread>
#include <condition_variable>
#include <mutex>
#include <chrono>
#include <queue>

#ifdef HAVE_GETOPT_H
#include <getopt.h>
#else
extern int optind;
extern char *optarg;
#endif

#include "log.h"
#include "ownet.h"
#include "console.h"
#include "database.h"
#include "tcpip.h"
#include "xml.h"
#include "commands.h"
#include "ownet.h"

extern LogFile dbglogfile;

using namespace std::chrono_literals;

extern std::mutex queue_lock;
extern std::queue <XML> tqueue;
extern std::condition_variable queue_cond;

void
client_handler(Tcpip &net)
{
    DEBUGLOG_REPORT_FUNCTION;

    retcode_t ret;
    Commands cmd;
    int retries = 10;
    std::string hostname;
    std::string user;

    while (retries-- <= 10) {
        if (net.newNetConnection(true) == ERROR) {
            std::cerr << "ERROR: new connection failed!" << std::endl;
            return;
        }

        bool loop = true;
        std::vector<unsigned char> data;
        while (loop) {
            data.clear();
            size_t pos = net.readNet(data).size();
            if (pos < 0) {
                dbglogfile << "ERROR: Got error from socket " << std::endl;
                //loop = false;
            } else {
                if (data.data() == 0) {
                    continue;  
                }
                std::string buffer = (char *)data.data();
                if (data.size() == 1 && buffer[0] == 0) {
                    net.closeConnection();
                    // loop = false;
                    break;
                }
                if (data.size() == 0) {
                    sleep(1);
                    continue;
                }
                // this assumes all packets from the client are terminated
                // with a newline, which text input from the console is.
                size_t pos = buffer.find('\n');
                if (pos == 0 || pos == std::string::npos) {
                    data.clear();
                    buffer.clear();
                    loop = false;
                    continue;
                }
                buffer.erase(pos);
                std::string str;
                // if the first character is a <, assume it's in XML formst.
                XML xml;
                if (buffer[0] == '<') {
                    xml.parseMem(buffer);
                    if (xml[0]->nameGet() == "helo") {
                        hostname = xml[0]->childGet(0)->valueGet();
                        user =  xml[0]->childGet(1)->valueGet();
                        dbglogfile << "Incoming connection from user " << user
                                   << " on host " << hostname << std::endl;
                    } else {
                        cmd.execCommand(xml, str);
                        std::lock_guard<std::mutex> guard(queue_lock);
                        tqueue.push(xml);
                        queue_cond.notify_one();
                    }
                }
                buffer.clear();
            }
        }
    }

    net.closeConnection();
}

#ifdef BUILD_OWNET
void
ownet_handler(Ownet &ownet)
{
    DEBUGLOG_REPORT_FUNCTION;
    dbglogfile << "PowerGuru - 1 Wire Mode" << std::endl;
    bool poll = true;
#ifdef HAVE_LIBPQ
    Database pdb;
    if (!pdb.openDB()) {
        dbglogfile << "ERROR: Couldn't open database!" << std::endl;
        exit(1);
    }
#endif

    // Open the network connection to the database.
    std::string query = "INSERT INTO onewire VALUES(";
    query += "";
    query += ");";

    std::map<std::string, ownet_t *> sensors = ownet.getSensors();
    std::map<std::string, ownet_t *>::iterator it;
    while (ownet.getPollSleep() > 0) {
        for (it = sensors.begin(); it != sensors.end(); it++) {
            if (it->second->family == "10" | it->second->family == "28") {
                boost::shared_ptr<temperature_t> temp = ownet.getTemperature(it->first.c_str());
#ifdef HAVE_LIBPQ
                std::string stamp;
                stamp = pdb.gettime(stamp);
                std::string query = temp->family;
                query += ",\'" + temp->id + "\'";
                query += ", \'" + temp->type + "\'";
                query += ", \'" + stamp + "\'";
                query += ", " + std::to_string(temp->lowtemp);
                query +=  ", " + std::to_string(temp->hightemp);
                query += ", " + std::to_string(temp->temp) + ", \'";
                query += temp->scale;
                query += "\'";
                pdb.queryInsert(query);
#endif
                //ownet.dump();
            }
        
            // Don't eat up all the cpu cycles!
            std::this_thread::sleep_for(std::chrono::seconds(ownet.getPollSleep()));
        }
    }
}
#endif

#ifdef BUILD_OUTBACK
void
outback_handler(Ownet &ownet)
{
    DEBUGLOG_REPORT_FUNCTION;

    dbglogfile << "FIXME: outback_handler() unimplementd"<< std::endl;
    // Don't eat up all the cpu cycles!
    std::this_thread::sleep_for(std::chrono::seconds(ownet.getPollSleep()));
}
#endif

#ifdef BUILD_XANTREX
void
xantrex_handler(Ownet &ownet)
{
    DEBUGLOG_REPORT_FUNCTION;

    dbglogfile << "FIXME: xantrext_handler() unimplemented"<< std::endl;
    // Don't eat up all the cpu cycles!
    std::this_thread::sleep_for(std::chrono::seconds(ownet.getPollSleep()));
}
#endif

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
