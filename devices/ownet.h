// 
// Copyright (C) 2005, 2006-2018.
//      Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifndef __OWNET_H__
#define __OWNET_H__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <mutex>
#include <string>
#include <vector>
#include <map>
#include <log.h>
#include <owcapi.h>
#include <boost/algorithm/string.hpp>
#include <boost/shared_ptr.hpp>
#include "database.h"

extern LogFile dbglogfile;

struct ownet {
    std::string family;
    std::string id;
    std::string type;
    std::string device;
} typedef ownet_t;

struct temperature {
    std::string family;
    std::string id;
    std::string type;
    float temp;
    float lowtemp;
    float hightemp;
    char scale;
} typedef temperature_t;

class Ownet {
private:
    enum family_t {CONTROL = 05, THERMOMETER = 10, THERMOMETER2 = 28};
    std::map<std::string, ownet_t *> _sensors;
    bool _owserver = false;
    //std::map<std::string, temperature_t *> _temperatures;
    std::mutex _mutex;
    int poll_sleep = 60;
    char _scale = 'F';
public:
    Ownet(void);
    Ownet(const std::string &host);
    ~Ownet(void) {
        OW_finish();
    };

    char setScale(char scale) { OW_put("/settings/units/temperature_scale", &_scale, 1); };

    // Thread have a polling frequency to avoid eating up all the cpu cycles
    // by polling to quickly.
    int getPollSleep(void) {
        return poll_sleep;
    }
    void setPollSleep(int x) {
        poll_sleep = x;
    }

    // see if we're connected to the owserver
    bool isConnected(void) {
        return _owserver;
    }

    // see if any 1 wire sensors were found during scanning
    bool hasSensors(void) {
        if (_sensors.size() >0) {
            return true;
        } else {
            return false;
        }
    }

    // extract a value from an owfs file
    std::string getValue(const std::string &device, std::string file) {
//        DEBUGLOG_REPORT_FUNCTION;
        char * buf;
        size_t s  = 0;

        std::string data = device + file;
        //std::cout << "Looking for: " << data;
        int ret = OW_get(data.c_str(), &buf, &s);
        if (ret <= 0) {
            return std::string();
            //} else {
            //std::cout << ", Got(" << s << "): " <<  buf << std::endl;
        }

        std::string value = (buf);
        free(buf);

        return value;
    }

    // return a handle to all the sensors
    ownet_t *getSensor(const std::string &device) {
        return _sensors[device];
    }

    std::map<std::string, ownet_t *> &getSensors(void) {
        return _sensors;
    }

    // get all the temperature fields for a device.
    boost::shared_ptr<temperature_t> getTemperature(const std::string &device) {
        // DEBUGLOG_REPORT_FUNCTION;

        std::string family = getValue(device, "family");
        std::string id = getValue(device, "id");
        std::string type = getValue(device, "type");

        if (family == "10" | family == "28") {
            // dbglogfile << device << " is a thermometer" << std::endl;
            boost::shared_ptr<temperature_t> temp(new temperature_t);
            temp->family = getValue(device, "family");
            temp->id = getValue(device, "id");
            temp->type = getValue(device, "type");
            temp->temp = std::stof(getValue(device, "temperature"));
            temp->lowtemp =std::stof(getValue(device, "templow"));
            temp->hightemp = std::stof(getValue(device, "temphigh"));
            char *buffer;
            size_t blen;
            OW_get("/settings/units/temperature_scale", &buffer, &blen);
            temp->scale = buffer[0];
            return temp;
        } else {
            dbglogfile << device << " is not a thermometer" << std::endl;
        }
        boost::shared_ptr<temperature_t> temp;
        return temp;
    }

    void dump(void);
#if 0
        {
        DEBUGLOG_REPORT_FUNCTION;

        std::map<std::string, ownet_t *>::iterator sit;
        for (sit = _sensors.begin(); sit != _sensors.end(); sit++) {
            std::cout << "Data for device: " << sit->first << std::endl;
            std::cout << "\tfamily: " << sit->second->family << std::endl;
            std::cout << "\ttype: " << sit->second->type << std::endl;
            std::cout << "\tid: " << sit->second->id << std::endl;
        }
        std::map<std::string, temperature_t *>::iterator tit;
        for (tit = _temperatures.begin(); tit != _temperatures.end(); tit++) {
            std::cout << "\tCurrent temperature: " << tit->second->temp << std::endl;
            std::cout << "\tLow temperture: " << tit->second->lowtemp << std::endl;
            std::cout << "\tHigh Temperature: " << tit->second->hightemp << std::endl;
        }
    }
#endif
    
    std::vector<std::string> &
    listDevices(std::vector<std::string> &list) {
        DEBUGLOG_REPORT_FUNCTION;

        std::map<std::string, ownet_t *>::iterator sit;
        for (sit = _sensors.begin(); sit != _sensors.end(); sit++) {
            std::string dev = sit->first.substr(sit->first.size()-1);
            list.push_back(sit->first);
        }
        return list;
    }

};

// __OWNET_H__
#endif

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
