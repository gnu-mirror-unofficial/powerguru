// 
// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013
//               2014, 2015, 2016, 2017, 2018, 2019
// Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifndef __LOG_H__
#define __LOG_H__

// This is generated by autoconf

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

// Target Manager error sub-system
#include "err.h"

#ifdef __cplusplus

#include <time.h>

#include <iostream>
#include <iomanip>
#include <cstring>
#include <fstream>

#include <boost/log/core.hpp>
#include <boost/log/trivial.hpp>
#include <boost/log/expressions.hpp>
#include <boost/log/sinks/text_file_backend.hpp>
#include <boost/log/sinks/basic_sink_frontend.hpp>
#include <boost/log/utility/setup/file.hpp>
#include <boost/log/utility/setup/console.hpp>
#include <boost/log/utility/setup/common_attributes.hpp>
#include <boost/log/utility/setup/filter_parser.hpp>
#include <boost/log/utility/setup/formatter_parser.hpp>
#include <boost/log/sources/severity_logger.hpp>
#include <boost/core/null_deleter.hpp>
#include <boost/log/sources/record_ostream.hpp>
#include <boost/log/sinks/text_ostream_backend.hpp>
#include <boost/log/common.hpp>
#include <boost/log/attributes.hpp>
#include <boost/log/sinks.hpp>
#include <boost/log/sources/logger.hpp>
#include <boost/log/support/date_time.hpp>
namespace logging = boost::log;
namespace attrs = boost::log::attributes;
namespace src = boost::log::sources;
namespace sinks = boost::log::sinks;
namespace expr = boost::log::expressions;
namespace keywords = boost::log::keywords;
namespace severity_level = boost::log::trivial;

extern src::logger lg;

extern void log_init(const std::string &name);

// the default name for the debug log
#define DEFAULT_LOGFILE	"powerguru-dbg.log"
#define TIMESTAMP_LENGTH 24             // timestamp length
#define TIMESTAMP_FORMAT "%Y-%m-%d %H:%M:%S     " // timestamp format

/// \struct __Host_Function_Report__
/// Struct/class to print an enter/return for a method
struct __Host_Function_Report__ {
    const char *func;
    src::logger lg;
    __Host_Function_Report__(void) {
        BOOST_LOG(lg) << "enter";
    }

    __Host_Function_Report__(char *_func) {
        func = _func;
	BOOST_LOG(lg) << func << " enter";
    }

    __Host_Function_Report__(const char *_func) {
        func = _func;
	BOOST_LOG(lg) << func << " enter";
    }

    ~__Host_Function_Report__(void) {
	BOOST_LOG(lg) << func << " return";
    }
};

#define DEBUGLOG_REPORT_FUNCTION                                        \
    __Host_Function_Report__ __host_function_report__( __PRETTY_FUNCTION__)

#define DEBUGLOG_REPORT_RETURN

#else
# define DEBUGLOG_REPORT_FUNCTION printf("%s entered\n", __FUNCTION__)
# define DEBUGLOG_REPORT_RETURN printf("%s return\n", __FUNCTION__)

// __cplusplus
#endif

// __LOG_H__
#endif

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
