// 
// Copyright (C) 2005, 2006 - 2018
//      Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <stdio.h>
#include <errno.h>
#include <string>

#include <iostream>
#include <iomanip>
#ifdef __STDC_HOSTED__
#include <sstream>
#else
#include <fstream>
#include <strstream>
#endif

#include "err.h"


using namespace std;

#if 0
ErrCond::ErrCond(void) {
    ecode = 0;
    line = 0;
}

ErrCond::ErrCond(int x) {
    ecode = x;
}
#endif

ErrCond::~ErrCond(void) {
}

ErrCond::ErrCond(const char *filein, int linein, const char *funcin, int codein, string &s) {
    file = filein;
    func = funcin;
    line = linein;
    ecode = codein;
    emsg = s;
}

// methods
void
ErrCond::ClearErr(void) {
    file.erase();
    func.erase();
    line = 0;
    ecode = 0;
    errno = 0;
    emsg.erase(); 
}

ErrCond &
ErrCond::SetMsg (const char *filein, int linein, const char *funcin, int codein, string s) {
    file = filein;
    func = funcin;
    line = linein;
    ecode = codein;
    emsg = s;
    return *this;
}

void
ErrCond::SetMsg (string &s) {
    emsg = s;
}

void
ErrCond::SetMsg (const char *s) {
    emsg = s;
}
 
void
ErrCond::SetMsg (int x, const char *s) {
    ecode = x;
    emsg = s;
}

// This grabs the endl operator. If we see this, then we are done
// formatting the string. We currently don't do anything with this.
ostream&
ErrCond::operator << (ostream & (&)(ostream &)) {
    //  ClearErr();
    cerr << __PRETTY_FUNCTION__ << ": not implemented!" << endl;
    // FIXME: This return value is tottaly bogus, and exists only to
    // shut up GCC until this actually gets implemented.
    return cout;
}

ErrCond& 
ErrCond::operator << (const char *x)
{
    emsg += x;
    return *this;
}

ErrCond& 
ErrCond::operator << (string &x)
{
    emsg += x;
    return *this;
}

ErrCond& 
ErrCond::operator << (void *x)
{
    char buf[10];
    sprintf ((char *)&buf, "%p", x);
    emsg += buf;
    return *this;
}

ErrCond& 
ErrCond::operator << (int x)
{
    char buf[10];
    sprintf ((char *)&buf, "%d", x);
    emsg += buf;
    return *this;
}

ostream& 
operator << (ostream &os, ErrCond& e) {
    string msg;
  
    if (e.GetCode() > EMEDIUMTYPE) {
        msg = "WARNING: ";
    } else {
        msg = "ERROR: ";
    }
  
    if (e.GetFunc().size() > 0)
        msg += e.GetFunc();

    if (e.GetLine() > 0)
        msg += e.GetFunc();
  
    if (e.GetMsg().size() > 0)
        msg += e.GetMsg();

    if (errno) {
        msg += " (";
        msg += strerror(errno);
        msg += ") ";
    }
  
    return os << msg;
}

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
