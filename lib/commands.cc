// 
// Copyright (C) 2018,2019 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

/// \file commands.cc Class to create and parse simple XML messages between
///                   the client and the server.

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <sys/types.h>
#include <sys/stat.h>

#include <unistd.h>
#include <cstring>
#include <vector>
#include <thread>
#include "xml.h"
#include "log.h"
#include "commands.h"

//    <NOP></NOP>
//    <TRIGGER><ID></ID><NAME></NAME><TYPE>type</TYPE><TIMESTAMP></TIMESTAMP></></TRIGGER>
//    <LIST><SENSORS>id or all</SENSORS></LIST>
//    <POLL><DEVICE>name</DEVICE></POLL>
//    <POLL><INTERVAL>seconds</INTERVAL></POLL>
//    <HELO></HELO>

Commands::Commands()
{
//    DEBUGLOG_REPORT_FUNCTION;

    _commands["nop"] = Commands::NOP;
//    _commands["trigger"] = Commands::TRIGGER;
    _commands["list"] = Commands::LIST;
    _commands["poll"] = Commands::POLL;
    _commands["helo"] = Commands::HELO;
}

Commands::~Commands()
{
//    DEBUGLOG_REPORT_FUNCTION;
}

std::string &
Commands::createNode(cmd_t cmd, const std::string &args,
                               std::string &str)
{
    DEBUGLOG_REPORT_FUNCTION;

    return str;
}

/// createCommand
/// @param cmd The command
/// @param args Arguments to the command, separated by spaces
/// @param str The string to hold the result
/// @returns The XML for this command
std::string &
Commands::createCommand(cmd_t cmd, const std::string &args,
                        std::string &str)
{
    //DEBUGLOG_REPORT_FUNCTION;

    if (cmd != RESULT) {
        str = "<command>";
    }

    switch (cmd) {
      case LIST:
          BOOST_LOG_SEV(lg, severity_level::debug) << "create LIST command: " << args;
          str += "<list>" + args + "</list>";
          break;
      case POLL:
          BOOST_LOG_SEV(lg, severity_level::debug) << "create POLL command: " << args;
          str += "<poll>" + args + "</poll>";
          break;
      case NOP:
          BOOST_LOG_SEV(lg, severity_level::debug) << "create NOP command: " << args;
          str += "<nop>" + args + "</nop>";
          break;
//      case TRIGGER:
//          BOOST_LOG_SEV(lg, severity_level::debug) << "create TRIGGER command: " << args;
//          str += "<nop>" + args + "</nop>";
//          break;
      case RESULT:
          BOOST_LOG_SEV(lg, severity_level::debug) << "create RESULT command: " << args;
          str += "<result>" + args + "</result>";
          break;
      case HELO:
          // This takes two optional arguments, the first one
          // is the hostname, the second the user name.
          BOOST_LOG_SEV(lg, severity_level::debug) << "create HELO command: " << args;
          std::string data = "<hostname>";
          size_t pos = args.find(' ');
          if (pos == std::string::npos) {
              data += args;
          } else {
              data += args.substr(0, pos);
          }
          data += "</hostname>";
          if (pos != std::string::npos) {
              data += "<user>";
              data += args.substr(pos+1);
              data += "</user>";
          }
          
          str += "<helo>" + data + "</helo>";
          break;
    };
    if (cmd != RESULT) {
        str += "</command>\n";
    }
    
    return str;
}

std::string &
Commands::execCommand(XML &xml, std::string &str)
{
    DEBUGLOG_REPORT_FUNCTION;

    std::string cmd = xml.nameGet();
    
    BOOST_LOG(lg) << "Executing remote command " << cmd;

    // The first child node is the top level command
    //if (xml[0]->nameGet() == "list") {
        //if (xml[0]->valueGet() == "devices") {
        //     // FIXME:
        //}
        //}

    createCommand(RESULT, "Iko Iko", str);
    
    return str;
}

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
