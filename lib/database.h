// 
// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
// 2013, 2014, 205, 206, 2017, 2018, 2019
//      Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifndef __DATABASE_H__
#define __DATABASE_H__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <boost/date_time.hpp>
#include <boost/date_time/date_facet.hpp>
#include "boost/date_time/gregorian/gregorian.hpp"
#include <boost/date_time/posix_time/posix_time.hpp>
#include "boost/date_time/local_time/local_time.hpp"
#include <iostream>
#include <sstream>
#include <cstring>
#include <list>
#include <map>
#include <iomanip> 
#include <vector>
#include <sys/time.h>
#include "onewire.h"

#ifdef HAVE_MARIADB
# include <mysql/errmsg.h>
# include <mysql/mysql.h>
#endif

#ifdef HAVE_LIBPQ
# include <libpq-fe.h>
#endif

static const char *DBTABLE = "powerguru";
static const char *DBNAME  = "powerguru";
static const char *DBUSER  = "powerguru";
static const char *DBPASS  = "powerguru";
static const char *DBHOST  = "localhost";

enum dbtype {NODB, DBDATABASE, DBPGSQL, DBODBC, DBGDBM, DBSTL};

typedef enum { NO_DEVICE, MX_OUTBACK, FX_OUTBACK, SW_XANTREX } device_t;

#ifdef HAVE_LIBXML
typedef struct
{
    int   unit;                   // The unit number for the device
    device_t type;                // The type of the device
    int   charge_amps;            // The amperage being put into the batteries
    int   ac_load_amps;           // The load in amps
    float battery_volts;          // Actual Battery Voltage
    float ac_volts_out;           // The voltage the inverter is producing
    float ac1_volts_in;           // Grid AC input
    float ac2_volts_in;           // Generator AC input. Xantrex only
    int   pv_amps_in;             // The current coming from the PV panels.
    float pv_volts_in;            // The DC voltage coming from the PV panels.
    float buy_amps;               // The AC current taken from the Grid
    // and used to charge the batteries; 
    float sell_amps;              // The AC current the batteries are
    // putting into the grid.
    float daily_kwh;              // The daily kilowatts put into the
    // batteries from the PV
    // source. Outback only.
    int   hertz;                  // Frequency in Hertz. Xantrex only
    float tempcomp_volts;         // Battery Voltage temperate
    // compensated. Xantrex Only.
  
}  meter_data_t ;
#endif

/// \class Database
/// This is the base class for database access
class Database
{
public:
    Database() : _dbtype(NODB), _dbport(0) {
        _ftable[ACVOLTAGE] = "ACVOLTAGE";
        _ftable[DCVOLTAGE] = "DCVOLTAGE";
        _ftable[AUTH] = "AUTHENTICATIN";
        _ftable[BATTERY] = "BATTERY";
        _ftable[CLOCK] = "CLOCK";
        _ftable[TEMPERATURE] = "TEMPERATURE";
        _ftable[THERMCOUPLE] = "THERMOCOUPLE";
        _ftable[MOISTURE] = "MOISTURE";
        _ftable[UNSUPPORTED] = "UNSUPORTED";

        // These values may be replaced on the command line. These are the
        // default behaviour.
        _tblname  = DBTABLE;
        _dbname   = DBNAME;
        _dbuser   = DBUSER;
        _dbpasswd = DBPASS;
        _dbhost   = DBHOST;
    };

    ~Database();

    /// \function gettime
    /// Return a timestamp field
    /// @param a string to hold the formatted result
    /// @return returns a timestamp as a string
    // 2019-01-04 08:34:34
    std::string &gettime(std::string &time) {
        //DEBUGLOG_REPORT_FUNCTION;
        using namespace boost::posix_time;
        boost::posix_time::ptime localtime = boost::posix_time::second_clock::local_time();
        static std::locale loc(std::cout.getloc(), new time_facet("%Y-%m-%d %H:%M:%S"));
        std::stringstream ss;
        ss.imbue(loc);
        ss << localtime;
        time = ss.str();
        return time;
    }

    bool openDB ();
    bool closeDB ();
    bool queryInsert(std::vector<meter_data_t *> data);
    //bool queryInsert(temperature_t &data);
    bool queryInsert(meter_data_t *data);
    bool queryInsert(const std::string &query, const std::string &db);
    void *queryResults(const char *query);
    //bool deleteDB(etamsg_t *data);
    //bool insertDB(etamsg_t *data);

    // Accessors
    void dbUserSet(std::string user);
    void dbPasswdSet(std::string passwd);
    void dbNameSet(std::string name);
    void dbHostSet(std::string host);

    // family | id | alias | type | timestamp 
    std::string formatQuery(boost::shared_ptr<onewire_t> &one,
                            std::string &result) {
        //DEBUGLOG_REPORT_FUNCTION;

        result.clear();
        result = "\'" + one->family + "\'";
        result += ", \'" + one->id + "\'";
        result += ", \'" + one->alias + "\'";
        result += ", " +  _ftable[one->type];
        std::string stamp;
        result += ", \'" + gettime(stamp) + "\'";

        //BOOST_LOG_SEV(lg, severity_level::debug) << "Formatted Query is: " << result;
        return result;
    }

    //  id | temperature | temphigh | templow | scale | timestamp
    std::string formatQuery(boost::shared_ptr<temperature_t> &temp,
                            std::string &result) {
        //DEBUGLOG_REPORT_FUNCTION;
        result.clear();
        result = "\'" + temp->id + "\'";
        result += ", " + std::to_string(temp->temp);
        result += ", " + std::to_string(temp->hightemp);
        result += ", " + std::to_string(temp->lowtemp);
        result += ", \'";
        result += temp->scale;
        std::string stamp;
        result += "\', \'" + gettime(stamp) + "\'";

        //BOOST_LOG_SEV(lg, severity_level::debug) << "Formatted Query is: " << result;
        return result;
    }

    // id | current | volts | type | timestamp
    std::string formatQuery(const boost::shared_ptr<battery_t> &batt,
                            std::string &result) {
        //DEBUGLOG_REPORT_FUNCTION;

        result.clear();
        result = "\'" + batt->id + "\'";
        result += ", " + std::to_string(batt->current);
        result += ", " + std::to_string(batt->volts);
        result += ", \'";
        result += (batt->DC == true ? "DC\'" : "AC\'");
        std::string stamp;
        result += ", \'" + gettime(stamp) + "\'";

        //BOOST_LOG_SEV(lg, severity_level::debug) << "Formatted Query is: " << result;
        return result;
    }
private:
    enum {CLOSED, OPENED} state;
    std::map<family_e, std::string> _ftable;
    std::map<std::string, family_t> _family;
    dbtype          _dbtype;
    int             _dbport;
    std::string     _dbuser;
    std::string     _dbpasswd;
    std::string     _dbhost;
    std::string     _dbname;
    std::string     _tblname;
#ifdef HAVE_MYSQL
    MYSQL           *_connection;
    MYSQL           _mysql;
#endif
#ifdef HAVE_LIBPQ
    PGconn           *_connection;
#endif
};

// __DATABASE_H__
#endif

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
