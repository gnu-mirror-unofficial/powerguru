// 
// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011
//      Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifndef __TCPUTIL_H__
#define __TCPUTIL_H__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/param.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <cstring>
#include <vector>

#include "log.h"
#include "err.h"

class Tcputil {
public:
    Tcputil();
    ~Tcputil();
    
    // These get the hostent data for this machine
    const struct hostent *hostDataGet();
    const struct hostent *hostDataGet(std::string name);
    const struct hostent *hostDataGet(struct hostent *entry);
    const struct hostent *hostDataGet(struct hostent *entry,
                                      std::string hostname);
    const struct hostent *hostByNameGet();
    const struct hostent *hostByNameGet(std::string addr);
    
    // These get the protoent data for this machine
    const struct protoent *protoDataGet();
    const struct protoent *protoDataGet(std::string name);
    const struct protoent *protoDataGet(struct protoent *entry);
    const struct protoent *protoDataGet(struct protoent *entry,
                                        std::string protoname);
    
    // This gets the servent data that contains the port
    // number as specified by it's /etc/services file entry.
    const struct servent *lookupService(int number);
    const struct servent *lookupService(std::string name);
    const struct servent *lookupService(std::string name,
                                        std::string protocol);
    const struct servent *lookupService(struct servent *entry,
                                        std::string name, std::string protocol);
    
    // These are accessors that extract the relevant field out
    // of a struct servent structure as returned by getservbyname().
    const int servicePortGet();
    const int servicePortGet(struct servent *x);
    const std::string serviceNameGet();
    const std::string serviceNameGet(struct servent *x);
    const std::string serviceProtoGet();
    const std::string serviceProtoGet(struct servent *x);
    
    // These are accessors that extract the relevant field out
    // of a struct protoent structure as returned by getprotobyname().
    const std::string protoNameGet();
    const std::string protoNameGet(struct protoent *x);
    const int protoNumGet();
    const int protoNumGet(struct protoent *x);
    
    // These are accessors that extract the relevant fields
    // out of a struct hostent structure as returned by
    // gethostbyname()
    const std::string hostNameGet();
    const std::string hostNameGet(struct hostent *x);
    const std::string hostIPNameGet();
    const std::string hostIPNameGet(struct hostent *x);
    const int hostLengthGet();
    const int hostLengthGet(struct hostent *x);
    const in_addr_t *hostIPGet();
    const in_addr_t *hostIPGet(struct hostent *x);
    
    const std::string hostByAddrGet();
    const std::string hostByAddrGet(std::string addr);
    
    int numberOfInterfaces();
    
    // Change the debug flag
    void toggleDebug(bool val);
    
private:
    bool               _debug;
    struct hostent     _host;
    struct servent     _service;
    struct protoent    _proto;
};

// EOF __TCPUTIL_H__
#endif

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
