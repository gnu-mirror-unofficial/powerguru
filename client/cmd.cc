// 
// Copyright (C) 2005, 2006 - 2018
//      Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <stdarg.h>
#include <signal.h>
#include <netinet/in.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <cstdio>
#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include "tcpip.h"
#include "console.h"
#include "msgs.h"
#include "log.h"
#include "tcpip.h"
#include "ownet.h"

static void usage (const char *);

const int INBUFSIZE = 1024;
extern void daemon_handler(Tcpip &net);
extern void console_handler(Tcpip &net);

int
main(int argc, char *argv[])
{
    int         c;
    std::string dbhost = "localhost";
    std::string pserver = "localhost:" + DEFAULTPORT;
    retcode_t   ret;

    log_init("pguru");
    // scan for the two main standard GNU options
    for (c=0; c<argc; c++) {
        if (strcmp("--help", argv[c]) == 0) {
            usage(argv[0]);
            exit(0);
        }
        if (strcmp("--version", argv[c]) == 0) {
            std::cerr << "PowerGuru version: " << VERSION << std::endl;
            exit(0);
        }
    }
    
    while ((c = getopt (argc, argv, "hvVd:p:")) != -1) {
        switch (c) {
          case 'h':
              usage (argv[0]);
              break;
        
          case 'v':
              //dbglogfile.set_verbosity();
              break;
        
          case 'd':
              dbhost = strdup(optarg);
              break;
        
          case 'p':
              pserver = strdup(optarg);
              break;

          case 'V':
              std::cerr << "PowerGuru version " << VERSION << std::endl;
              exit (0);
              break;   
        
          default:
              usage (argv[0]);
              break;
        }
    }

#ifdef BUILD_OWNET_XXX
    // Talk directly to the OW daemon
    Ownet ownet(pserver + ":4304");
    if (ownet.isConnected()) {
        if (ownet.hasSensors()) {
            BOOST_LOG(lg) << "and has sensors attached" << std::endl;
            ownet.dump();
        } else {
            BOOST_LOG(lg) << "and has no sensors attached" << std::endl;
        }
    }
#endif
    Tcpip net;
    if (net.createNetClient(pserver) == ERROR) {
        std::cerr << "ERROR: Can't connect to Powerguru daemon!" << std::endl;
        exit(-1);
    }

    std::thread first (daemon_handler, std::ref(net));
    std::thread second (console_handler, std::ref(net));

    first.join();                // pauses until second finishes
    second.join();                // pauses until second finishes

#ifdef BUILD_OWNET
    //third.join();                // pauses until second finishes
#endif

}

static void
usage (const char *prog)
{
    std::cerr << "This is a simple command line for the PowerGuru daemon." << std::endl;
    std::cerr << "Usage: pguru: [h] filename" << std::endl;
    std::cerr << "-h\tHelp" << std::endl;
    std::cerr << "-v\tVerbose output" << std::endl;
    std::cerr << "-d\tDatabase Host(localhost)" << std::endl;
    std::cerr << "-p\tPowerguru Host(localhost)" << std::endl;
    exit (-1);
}

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
