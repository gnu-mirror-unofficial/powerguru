// 
//   Copyright (C) 2018 Free Software Foundation, Inc.
//
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation; either version 2 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <unistd.h>
#include <vector>
#include "dejagnu.h"
#include "xml.h"
#include "commands.h"

int verbosity;
static void usage (void);
bool waitforgdb = false;

TestState runtest;

class Test : public Commands
{
public:
    Test() {
        DEBUGLOG_REPORT_FUNCTION;

        std::string str;
        std::cerr << createCommand(Commands::NOP, "", str) << std::endl;
        if (str == "<command></command>") {
            runtest.pass("NOP command");
        } else {
            runtest.fail("NOP command");
        }
        str.erase();
        //
        std::cerr << createCommand(Commands::LIST, "foo", str) << std::endl;
        if (str == "<command><list>foo</list></command>") {
            runtest.pass("LIST command");
        } else {
            runtest.fail("LIST command");
        }
        str.erase();
        std::cerr << createCommand(Commands::POLL, "bar", str) << std::endl;
        if (str == "<command><poll>bar</poll></command>") {
            runtest.pass("POLL command");
        } else {
            runtest.fail("POLL command");
        }
        str.erase();

        
    };
    ~Test() {};
};

int
main(int argc, char *argv[])
{
    int c;
    bool dump = false;
    char buffer[300];
    std::string filespec;
    
    int retries = 3;

    memset(buffer, 0, 300);
    
    while ((c = getopt (argc, argv, "hdvsm:")) != -1) {
        switch (c) {
          case 'h':
            usage ();
            break;
            
          case 'd':
            dump = true;
            break;
            
          case 's':
            waitforgdb = true;
            break;
                                                                                
          case 'v':
            verbosity++;
            break;
            
          default:
            usage ();
            break;
        }
    }
    
    // get the file name from the command line
    if (optind < argc) {
        filespec = argv[optind];
        std::cout << "Will use \"" << filespec << "\" for test " << std::endl;
    }

    Test test;
}

void
cntrlc_handler (int sig)
{
    std::cerr << "Got a ^C !" << std::endl;
}

void
alarm_handler (int sig)
{
    std::cerr << "Got an alarm signal !" << std::endl;
    std::cerr << "This is OK, we use it to end this test case." << std::endl;
}

static void
usage (void)
{
    std::cerr << "This program tests the XML processing code." << std::endl;
    std::cerr << "Usage: ./xml [h]" << std::endl;
    std::cerr << "-h\tHelp" << std::endl;
    std::cerr << "-d\tDump parsed data" << std::endl;
    exit (-1);
}

